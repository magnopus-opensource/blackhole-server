# Install project dependencies with poetry and run PyYaml on the result

# This script is based heavily on this post by Jacob Kaplan-Moss:
# https://jacobian.org/til/github-actions-poetry/

name: Pylint

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: 3.10.12

    # Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
    # from installing Poetry every time, which can be slow. Note the use of the Poetry version
    # number in the cache key, and the "-0" suffix: this allows you to invalidate the cache
    # manually if/when you want to upgrade Poetry, or if something goes wrong. This could be
    # mildly cleaner by using an environment variable, but I don't really care.
    - name: Cache poetry install
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-1.1.12-0

    # Install Poetry. You could do this manually, or there are several actions that do this.
    # `snok/install-poetry` seems to be minimal yet complete, and really just calls out to
    # Poetry's default install script, which feels correct. I pin the Poetry version here
    # because Poetry does occasionally change APIs between versions and I don't want my
    # actions to break if it does.
    #
    # The key configuration value here is `virtualenvs-in-project: true`: this creates the
    # venv as a `.venv` in your testing directory, which allows the next step to easily
    # cache it.
    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.1.12
        virtualenvs-create: true
        virtualenvs-in-project: true

    # Cache your dependencies (i.e. all the stuff in your `pyproject.toml`). Note the cache
    # key: if you're using multiple Python versions, or multiple OSes, you'd need to include
    # them in the cache key. I'm not, so it can be simple and just depend on the poetry.lock.
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v2
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself", which is what you want to avoid caching _your_ code. The `if` statement
      # ensures this only runs on a cache miss.
    - name: Install dependencies
      run: |
        poetry poetry install --no-interaction --no-root
        poetry run pip install pylint
      if: steps.cache-deps.outputs.cache-hit != 'true'

    # Now install _your_ project. This isn't necessary for many types of projects -- particularly
    # things like Django apps don't need this. But it's a good idea since it fully-exercises the
    # pyproject.toml and makes that if you add things like console-scripts at some point that
    # they'll be installed and working.
    - name: Install project
      run: poetry install --no-interaction

    - name: Analysing the code with pylint
      run: |
        poetry run pylint --errors-only $(git ls-files '*.py')
